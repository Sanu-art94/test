#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NUM_BUCKETS 3 // Number of predefined block sizes

// Predefined block sizes (e.g., small, medium, large)
const size_t blockSizes[NUM_BUCKETS] = {16, 32, 64};

// Node structure for a free list
typedef struct Node {
    void *block;
    struct Node *next;
} Node;

// Array of free lists for each block size
Node *freeLists[NUM_BUCKETS] = {NULL, NULL, NULL};

// Helper function to find the index of a block size
int findBucket(size_t size) {
    for (int i = 0; i < NUM_BUCKETS; i++) {
        if (size <= blockSizes[i]) {
            return i;
        }
    }
    return -1; // No suitable bucket
}

// Allocate memory using Quick Fit
void *quickFitMalloc(size_t size) {
    int bucketIndex = findBucket(size);

    if (bucketIndex == -1) {
        // If size is too large, use general malloc
        return malloc(size);
    }

    // Check the free list for the appropriate bucket
    if (freeLists[bucketIndex] != NULL) {
        Node *node = freeLists[bucketIndex];
        void *block = node->block;
        freeLists[bucketIndex] = node->next;
        free(node);
        return block;
    }

    // No available blocks, allocate a new block
    return malloc(blockSizes[bucketIndex]);
}

// Free memory and add it to the appropriate free list
void quickFitFree(void *ptr, size_t size) {
    int bucketIndex = findBucket(size);

    if (bucketIndex == -1) {
        // If size is too large, use general free
        free(ptr);
        return;
    }

    // Add the block to the appropriate free list
    Node *node = (Node *)malloc(sizeof(Node));
    node->block = ptr;
    node->next = freeLists[bucketIndex];
    freeLists[bucketIndex] = node;
}

// Function to clear all free lists
void clearFreeLists() {
    for (int i = 0; i < NUM_BUCKETS; i++) {
        Node *current = freeLists[i];
        while (current != NULL) {
            Node *temp = current;
            current = current->next;
            free(temp->block);
            free(temp);
        }
        freeLists[i] = NULL;
    }
}

// Test the Quick Fit algorithm
int main() {
    // Allocate memory
    void *ptr1 = quickFitMalloc(16);
    void *ptr2 = quickFitMalloc(32);
    void *ptr3 = quickFitMalloc(64);

    // Free memory
    quickFitFree(ptr1, 16);
    quickFitFree(ptr2, 32);
    quickFitFree(ptr3, 64);

    // Reallocate memory from free lists
    void *ptr4 = quickFitMalloc(16);
    void *ptr5 = quickFitMalloc(32);

    printf("Memory allocated and reused successfully.\n");

    // Clear all free lists
    clearFreeLists();

    return 0;
}
